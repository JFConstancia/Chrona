// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  hashedPassword String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  phoneNumber   String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String  @db.Text
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

/// ✅ Trial status per telefoon (geen user-account nodig)
model PhoneTrial {
  phoneNumber       String   @id                  // bv. "+31612345678" (zonder "whatsapp:")
  status      String                        // 'trialing' | 'active' | 'expired'
  trialEndsAt DateTime?
  createdAt   DateTime @default(now())

  @@index([status])
}


/// ✅ Tijdelijke Google-tokens gekoppeld aan telefoon tijdens trial
model GooglePhoneToken {
  phoneNumber        String   @id
  accessToken  String   @db.Text
  refreshToken String?  @db.Text
  expiresAt    BigInt?
  email        String?
  updatedAt    DateTime @default(now())
}

/// ✅ Abonnementsstatus na upgrade (klassiek billing-record bij een user)
model Billing {
  userId               String  @id
  stripeCustomerId     String?
  stripeSubscriptionId String?
  status               String   // 'active' | 'canceled' | 'past_due' | ...
  currentPeriodEnd     DateTime?

  @@index([status])
}

/// (Optioneel) persistente Google-tokens ná upgrade, gekoppeld aan user
model GoogleAccount {
  userId       String  @id
  accessToken  String  @db.Text
  refreshToken String? @db.Text
  expiresAt    BigInt?
  email        String?
}

/// (Optioneel) voorkom dubbele reminders
model ReminderSent {
  phoneNumber   String
  googleEventId String
  sentAt        DateTime @default(now())

  @@id([phoneNumber, googleEventId])
}